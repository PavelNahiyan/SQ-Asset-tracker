import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

// Mock Firebase functions for demonstration
const mockDb = {
  assets: []
};

const mockAuth = {
  currentUser: null,
  users: [{ email: 'admin@sq.com', password: 'admin123' }]
};

// Mock QR Code component
const QRCode = ({ value, size = 100 }) => (
  <div 
    className="border-2 border-gray-300 flex items-center justify-center bg-white"
    style={{ width: size, height: size }}
  >
    <div className="text-xs text-center p-2">
      QR Code<br/>
      {value.substring(0, 20)}...
    </div>
  </div>
);

export default function AssetTracker() {
  const [assets, setAssets] = useState([]);
  const [assetName, setAssetName] = useState('');
  const [department, setDepartment] = useState('');
  const [deviceType, setDeviceType] = useState('');
  const [image, setImage] = useState(null);
  const [user, setUser] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Mock authentication check
  useEffect(() => {
    // Simulate checking for existing session
    const savedUser = localStorage.getItem('mockUser');
    if (savedUser) {
      setUser(JSON.parse(savedUser));
      fetchAssets();
    }
  }, []);

  const login = async () => {
    setLoading(true);
    setError('');
    
    try {
      // Mock login validation
      const validUser = mockAuth.users.find(u => u.email === email && u.password === password);
      if (!validUser) {
        throw new Error('Invalid credentials');
      }
      
      const userObj = { email: validUser.email, uid: 'mock-uid-123' };
      setUser(userObj);
      localStorage.setItem('mockUser', JSON.stringify(userObj));
      
      // Clear form
      setEmail('');
      setPassword('');
      
      // Fetch assets after login
      await fetchAssets();
    } catch (err) {
      setError(err.message || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    setUser(null);
    localStorage.removeItem('mockUser');
    setAssets([]);
  };

  const fetchAssets = async () => {
    try {
      // Mock fetching from localStorage
      const savedAssets = localStorage.getItem('mockAssets');
      if (savedAssets) {
        setAssets(JSON.parse(savedAssets));
      }
    } catch (err) {
      console.error('Error fetching assets:', err);
    }
  };

  const generateId = () => {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  };

  const handleUpload = async () => {
    if (!assetName.trim() || !department.trim() || !deviceType.trim()) {
      setError('Please fill in all required fields');
      return;
    }

    setLoading(true);
    setError('');

    try {
      let imageUrl = '';
      if (image) {
        // Mock image upload - in real app this would upload to Firebase Storage
        const reader = new FileReader();
        imageUrl = await new Promise((resolve) => {
          reader.onload = (e) => resolve(e.target.result);
          reader.readAsDataURL(image);
        });
      }

      const newAsset = {
        id: generateId(),
        assetName: assetName.trim(),
        department: department.trim(),
        deviceType: deviceType.trim(),
        imageUrl,
        createdAt: new Date().toISOString(),
      };

      const updatedAssets = [...assets, newAsset];
      setAssets(updatedAssets);
      
      // Save to localStorage (mock database)
      localStorage.setItem('mockAssets', JSON.stringify(updatedAssets));

      // Clear form
      setAssetName('');
      setDepartment('');
      setDeviceType('');
      setImage(null);
      
      // Reset file input
      const fileInput = document.querySelector('input[type="file"]');
      if (fileInput) fileInput.value = '';

    } catch (err) {
      setError('Failed to add asset: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id) => {
    if (!confirm('Are you sure you want to delete this asset?')) return;

    try {
      const updatedAssets = assets.filter(asset => asset.id !== id);
      setAssets(updatedAssets);
      localStorage.setItem('mockAssets', JSON.stringify(updatedAssets));
    } catch (err) {
      setError('Failed to delete asset: ' + err.message);
    }
  };

  const downloadPDF = async (asset) => {
    try {
      // Mock PDF generation - in real app would use jsPDF
      const content = `Asset Label\n\nName: ${asset.assetName}\nType: ${asset.deviceType}\nDepartment: ${asset.department}\nCreated: ${new Date(asset.createdAt).toLocaleDateString()}`;
      
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${asset.assetName}-label.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (err) {
      setError('Failed to generate PDF: ' + err.message);
    }
  };

  const exportCSV = () => {
    try {
      if (assets.length === 0) {
        setError('No assets to export');
        return;
      }

      const headers = ['Asset Name', 'Department', 'Device Type', 'Created At'];
      const csvContent = [
        headers.join(','),
        ...assets.map(asset => [
          `"${asset.assetName}"`,
          `"${asset.department}"`,
          `"${asset.deviceType}"`,
          `"${new Date(asset.createdAt).toLocaleDateString()}"`
        ].join(','))
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'assets.csv';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (err) {
      setError('Failed to export CSV: ' + err.message);
    }
  };

  // Login screen
  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 space-y-4">
            <h2 className="text-2xl font-bold text-center">SQ Asset Tracker</h2>
            <p className="text-sm text-gray-600 text-center">Admin Login Required</p>
            
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-600 px-3 py-2 rounded">
                {error}
              </div>
            )}
            
            <div className="space-y-3">
              <Input 
                placeholder="Email" 
                type="email"
                value={email} 
                onChange={e => setEmail(e.target.value)}
                disabled={loading}
              />
              <Input 
                placeholder="Password" 
                type="password" 
                value={password} 
                onChange={e => setPassword(e.target.value)}
                disabled={loading}
                onKeyDown={e => e.key === 'Enter' && login()}
              />
              <Button 
                onClick={login} 
                disabled={loading || !email || !password}
                className="w-full"
              >
                {loading ? 'Logging in...' : 'Login'}
              </Button>
            </div>
            
            <div className="text-xs text-gray-500 text-center">
              Demo credentials: admin@sq.com / admin123
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Main application
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto p-6">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-3xl font-bold">SQ Asset Tracker</h1>
            <p className="text-gray-600">Welcome, {user.email}</p>
          </div>
          <div className="flex gap-2">
            <Button 
              variant="secondary" 
              onClick={exportCSV}
              disabled={assets.length === 0}
            >
              Export CSV ({assets.length})
            </Button>
            <Button variant="destructive" onClick={logout}>
              Logout
            </Button>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded mb-4">
            {error}
            <button 
              onClick={() => setError('')}
              className="float-right text-red-400 hover:text-red-600"
            >
              Ã—
            </button>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Add Asset Form */}
          <Card>
            <CardContent className="p-6">
              <h2 className="text-xl font-bold mb-4">Add New Asset</h2>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Asset Name *</label>
                  <Input 
                    placeholder="e.g., Laptop Dell XPS 13" 
                    value={assetName} 
                    onChange={e => setAssetName(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Department *</label>
                  <Input 
                    placeholder="e.g., IT, HR, Finance" 
                    value={department} 
                    onChange={e => setDepartment(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Device Type *</label>
                  <Input 
                    placeholder="e.g., Laptop, Desktop, Monitor" 
                    value={deviceType} 
                    onChange={e => setDeviceType(e.target.value)}
                    disabled={loading}
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Asset Image (optional)</label>
                  <Input 
                    type="file" 
                    accept="image/*"
                    onChange={e => setImage(e.target.files[0])}
                    disabled={loading}
                  />
                </div>
                
                <Button 
                  onClick={handleUpload}
                  disabled={loading || !assetName.trim() || !department.trim() || !deviceType.trim()}
                  className="w-full"
                >
                  {loading ? 'Adding Asset...' : 'Add Asset'}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Asset List */}
          <Card>
            <CardContent className="p-6">
              <h2 className="text-xl font-bold mb-4">
                Tracked Assets ({assets.length})
              </h2>
              
              {assets.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <p>No assets tracked yet.</p>
                  <p className="text-sm">Add your first asset using the form.</p>
                </div>
              ) : (
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  {assets.map(asset => (
                    <div key={asset.id} className="border rounded-lg p-4 bg-white">
                      <div id={`label-${asset.id}`} className="space-y-3">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="font-semibold text-lg">{asset.assetName}</h3>
                            <p className="text-gray-600">{asset.deviceType}</p>
                            <p className="text-sm text-gray-500">Dept: {asset.department}</p>
                            <p className="text-xs text-gray-400">
                              Added: {new Date(asset.createdAt).toLocaleDateString()}
                            </p>
                          </div>
                          <QRCode 
                            value={`Asset: ${asset.assetName}\nDept: ${asset.department}\nType: ${asset.deviceType}`} 
                            size={80} 
                          />
                        </div>
                        
                        {asset.imageUrl && (
                          <div className="mt-2">
                            <img 
                              src={asset.imageUrl} 
                              alt={`${asset.assetName} image`}
                              className="w-32 h-20 object-cover rounded border"
                            />
                          </div>
                        )}
                      </div>
                      
                      <div className="flex gap-2 mt-4 pt-3 border-t">
                        <Button 
                          variant="secondary" 
                          size="sm"
                          onClick={() => downloadPDF(asset)}
                        >
                          Download Label
                        </Button>
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => handleDelete(asset.id)}
                        >
                          Delete
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
